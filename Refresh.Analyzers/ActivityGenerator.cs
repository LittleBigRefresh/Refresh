using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Refresh.Analyzers.SyntaxReceivers;

namespace Refresh.Analyzers;

[Generator]
public class ActivityGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        // no initialization code
    }

    // Returns the first section of a PascalCase string
    private static string GetTypeFromName(string input)
    {
        int capitals = 0;
        for (int i = 0; i < input.Length; i++)
        {
            if (!char.IsUpper(input[i])) continue;
            capitals++;

            if (capitals != 2) continue;
            
            return input.Substring(0, i);
        }

        return input;
    }

    private static (string, string) GetIdFieldFromName(string name)
    {
        string idField;
        string idFieldValue;

        if (name != "User")
        {
            idField = "StoredSequentialId";
            idFieldValue = idField + ".Value";
        }
        else
        {
            idField = "StoredObjectId";
            idFieldValue = idField;
        }

        return (idField, idFieldValue);
    }

    private static void GenerateCreateEvents(GeneratorExecutionContext context, IEnumerable<string> names)
    {
        string code = string.Empty;
        foreach (string name in names)
        {
            string type = GetTypeFromName(name);
            string typeParam = type.ToLower();
            
            (string idField, string _) = GetIdFieldFromName(type);
            
            string method = $@"
    /// <summary>
    /// Creates a new {name} event from a Game{type}, and adds it to the event list.
    /// </summary>
    public Event Create{name}Event(GameUser userFrom, Game{type} {typeParam})
    {{
        Event @event = new();
        @event.EventType = EventType.{name};
        @event.StoredDataType = EventDataType.{type};
        @event.Timestamp = GetTimestampMilliseconds();
        @event.User = userFrom;

        @event.{idField} = {typeParam}.{type}Id;

        this._realm.Write(() => this._realm.Add(@event));
        return @event;
    }}
";

            code += method;
        }


        string sourceCode = $@"// <auto-generated/>
using Refresh.GameServer.Types.Activity;
using Refresh.GameServer.Types.UserData;
using Refresh.GameServer.Types.Levels;

namespace Refresh.GameServer.Database;

public partial class RealmDatabaseContext
{{
{code}
}}";
        
        context.AddSource("RealmDatabaseContext.Activity.CreateEvents.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
    }

    private static void GenerateDataGetters(GeneratorExecutionContext context, IEnumerable<string> names)
    {
        string code = string.Empty;
        
        foreach (string name in names)
        {
            string type = "Game" + name;
            
            (string idField, string idFieldValue) = GetIdFieldFromName(name);
            
            string method = $@"
    public {type}? Get{name}FromEvent(Event @event)
    {{
        if (@event.StoredDataType != EventDataType.{name})
            throw new InvalidOperationException(""Event does not store the correct data type (expected {name})"");

        if (@event.{idField} == null)
            throw new InvalidOperationException(""Event was not created correctly, expected {idField} to not be null"");

        return this._realm.All<{type}>()
            .FirstOrDefault(l => l.{name}Id == @event.{idFieldValue});
    }}
";

            code += method;
        }
        
        string sourceCode = $@"// <auto-generated/>
using Refresh.GameServer.Types.Activity;
using Refresh.GameServer.Types.UserData;
using Refresh.GameServer.Types.Levels;

namespace Refresh.GameServer.Database;

#nullable enable

public partial class RealmDatabaseContext
{{
{code}
}}";
        
        context.AddSource("RealmDatabaseContext.Activity.DataGetters.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
    }

    public void Execute(GeneratorExecutionContext context)
    {
        EnumNameReceiver syntaxReceiver = new();
        
        foreach (SyntaxTree tree in context.Compilation.SyntaxTrees)
            syntaxReceiver.OnVisitSyntaxNode(tree.GetRoot());
        
        
        foreach ((string className, List<string> names) in syntaxReceiver.Enums)
            switch (className)
            {
                case "EventType":
                    GenerateCreateEvents(context, names);
                    break;
                case "EventDataType":
                    GenerateDataGetters(context, names);
                    break;
            }
    }
}